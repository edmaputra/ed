apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

  implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
  implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"

  compile 'jakarta.persistence:jakarta.persistence-api:2.2.3'
  compile 'jakarta.validation:jakarta.validation-api:2.0.2'
  compile 'jakarta.annotation:jakarta.annotation-api:1.3.5'

  annotationProcessor(
      "com.querydsl:querydsl-apt:${queryDslVersion}:jpa",
      "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
      "jakarta.annotation:jakarta.annotation-api:1.3.5"
  )

  testRuntime "com.h2database:h2"
}

java {
  withSourcesJar()
  withJavadocJar()
}

tasks.withType(JavaCompile) {
  options.annotationProcessorGeneratedSourcesDirectory = file("src/generated/java")
}

sourceSets {
  generated {
    java {
      srcDirs = ['src/generated/java']
    }
  }
}

//def sonatypeUsername = project.hasProperty("SONATYPE_USERNAME") ? project.property("SONATYPE_USERNAME") : 'username'
//def sonatypePassword = project.hasProperty("SONATYPE_PASSWORD") ? project.property("SONATYPE_PASSWORD") : 'password'
def signingKey = project.hasProperty("PGP_SIGNING_KEY") ? project.property("PGP_SIGNING_KEY") : 'pgp_signing_key'
def signingPassword = project.hasProperty("PGP_SIGNING_PASSWORD") ? project.property("PGP_SIGNING_PASSWORD") : 'pgp_signing_password'

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'ed-base'
      from components.java
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      pom {
        name = 'ed-base'
        description = 'Base component for basic CRUD operation with Spring Boot'
        url = 'https://github.com/edmaputra/ed'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'edmaputra'
            name = 'Bangun Edma Saputra'
            email = 'bangun.edma.saputra@gmail.com'
          }
        }
        scm {
          url = 'https://github.com/edmaputra/ed.git'
          connection = 'scm:git:https://github.com/edmaputra/ed.git'
          developerConnection = 'scm:git:https://github.com/edmaputra/ed.git'
        }
      }
    }
  }
  repositories {
    maven {
      def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
      def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username = "${sonatypeUsername}"
        password = "${sonatypePassword}"
      }
    }
  }
}


signing {
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.mavenJava
}


javadoc {
  if(JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}
